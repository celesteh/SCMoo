TITLE:: MooObject
summary:: An object in the Moo
categories::Libraries>BiLETools>SCMoo, Games>SCMoo
related::Classes/Moo, Classes/MooVerb, Classes/NetAPI

DESCRIPTION::
All objects in the Moo are a MooObject or one of it's subclasses.

CLASSMETHODS::

METHOD:: id
Find the ID of an object
ARGUMENT:: obj
Do you have the ID already? Do you have an object? This method gives you the ID.

METHOD:: mooObject
Find an object for an ID

ARGUMENT:: obj
Do you have the object already? Is this just the ID? This method gives you the object.

ARGUMENT:: moo
The instance of Moo that is tracking the object




METHOD:: new

ARGUMENT:: moo
an instance of Moo

ARGUMENT:: name
The name of your object. This is what will show up when you take an inventory

ARGUMENT:: maker
The MooPlayer who is creating the object and is therefore the owner of it

ARGUMENT:: parent
This is another Moo object (or ID) from which this new object should inherit all it's properties and whose verbs it should be able to call.



METHOD:: fromJSON
Load an object from JSON

ARGUMENT:: dict
A Dictionary object containing JSON key / value pairs

ARGUMENT:: converter
An instance of MooJSONConverter

ARGUMENT:: moo
an instance of Moo



METHOD:: generic
find the Moo's generic object, the instance of this class which is the parent (or ancestor) of all other MooObjects

ARGUMENT:: moo
an instance of Moo


METHOD:: refToObject
When restoring the MOO from JSON, find MooObjects lined to from other MooObject
ARGUMENT:: obj
An object which might be JSON, an object ID or an actual MooObject

ARGUMENT:: converter
An instance of MooJSONConverter

ARGUMENT:: moo
an insteance of Moo



INSTANCEMETHODS::

METHOD:: getClock
Not yet implemented, but allos clock syncing between multiple objectd

ARGUMENT:: quant
(describe argument here)


METHOD:: matches
Determine if a string or symbol refers to this object, either by its name or an alias

ARGUMENT:: key
The string or symbol to match

returns:: true or false

METHOD:: isPlayer
is this object an instance of MooPlayer?

returns:: true or false


METHOD:: restore
Restore an object that was saved as JSON

ARGUMENT:: dict
A Dictionary object containing JSON key / value pairs

ARGUMENT:: converter
An instance of MooJSONConverter

ARGUMENT:: imoo
an instance of Moo


METHOD:: restored
This method is called when every object from a JSON file or string has been loaded.



METHOD:: alias
Add an alias

ARGUMENT:: new_alias
the new alias



METHOD:: verbs

returns:: A list of the verbs on the object



METHOD:: move
For an object or player to move itself from one MooRoom to another

ARGUMENT:: newLocation
The new Room



METHOD:: aliases
get the aliases for this object
returns:: an Array

METHOD:: owner
get the owner of this object

returns:: a MooPlayer

METHOD:: verb
Attach a verb to an object. For example, make you have an object called a spear. Perhaps
you want to be able to throw this at targets such as other players. You might decide
to invoke your verb with a sentence such as "code:: throw spear at Les ::". In that example, the verb is "throw", the direct object is "spear" and the indirect object is "Les".

ARGUMENT:: key
A symbol, which is the name of the verb.

ARGUMENT:: dobj
A symbol: either code:: \this or \any :: If the object is referenced in the direct object, pick code::\this::. If it can be anything else, pick code::\any::.

ARGUMENT:: iobj
A symbol: either code:: \this or \any, or \none :: If the object is referenced in the indirect object, pick code::\this::. If it can be anything else, pick code::\any::.

ARGUMENT:: func
A function that takes the arguments code::dobj, iobj, caller, object ::

code::dobj:: is the direct object of the command. If it refers to an MooObject, the function will be passed the object. Otherwise, it will be passed the string.

code::iobj:: is the indirect object of the command. If it refers to an MooObject, the function will be passed the object. Otherwise, it will be passed the string.

code::caller:: is the player who invoked the command

code::object:: is the MooObject to which the verb is attached.

ARGUMENT:: publish
A boolean. If True, the verb can be invoked via OSC message. This is useful if the verb includes audio.



METHOD:: property
Put a property on the object. This is a piece of data that you might use in verbs.

ARGUMENT:: key
A symbol which is the name of the property. If you use a symbol known to ControlSpec, that spec will be used if you open a GUI for your object.

ARGUMENT:: ival
The initial value for your new property.

ARGUMENT:: publish
If true, this property can be accessed via OSC messages

ARGUMENT:: changer
The entity that has added (or updated) the property. That entity will not be notified of the update.

METHOD:: immobel
If True, users cannot pick up and move the object. If False, they can.


METHOD:: isPublic
(describe method here)

ARGUMENT:: key
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: localVerb
(describe method here)

ARGUMENT:: key
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: properties
(describe method here)

returns:: (describe returnvalue here)

METHOD:: ==
Is this the same as another MooObject?

ARGUMENT:: other
The Object that might be equal to this one.


METHOD:: toJSON
Export this object to a JSON string.

ARGUMENT:: converter
an optional MooJSONConverter

returns:: a String

METHOD:: location
Get or set the location of a MooObject. This might be a MooRoom, a MooContainer, a MooPlayer holding it, or nil.
Usually, a MooRoom would not have a location.

ARGUMENT:: loc
The MooContainer or subclass holding the MooObject

returns:: (describe returnvalue here)

METHOD:: formatKey
(describe method here)

ARGUMENT:: key
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: getVerb
(describe method here)

ARGUMENT:: key
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: id
(describe method here)

returns:: (describe returnvalue here)


EXAMPLES::

code::
(some example code)
::
