TITLE:: MooGUI
summary:: A GUI for Moo interaction
categories:: Libraries>BiLETools>SCMoo, Games>SCMoo
related:: Classes/Moo, Classes/MooVerb, Classes/MooObject, Classes/Environment

DESCRIPTION::
A GUI object that enables Moo interaction. The window/view has three text areas. The left one is Moo output.
The bottom one is to interact with the Moo as a user. Here you can type Moo commands.
The right one is a coding interface.

You can evaluate any SuperCollider code in the normal way.

You can also evaluate Moo commands by using the key combination ALT right arrow.

The code shown at the top of the window will load the Moo as an Environment.

For example, you might type code:: make cat :: and evaluate that line with ALT right arrow.

Then to program a verb on the cat, you might code:
code::
~cat.verb_(\stroke, \this, \none, {|dobj, iobj, caller, object|
	caller.location.announce("% purrs as % strokes him.".format(object.name. caller.name))
});
::
You could then interact with the cat's new verb, by typing code:: stroke cat :: in the right half of the window,
and evaluating it with ALT right arrow, or by typing it in the long bar at the bottom and hitting enter.

The two larger text areas have a vertical divider between them. If you click and drag on the grey line in that
divider, you can change the relative size, to ignore the output window when deep in code, or to concentrate
on user-level interactions.

CLASSMETHODS::

METHOD:: new
(describe method here)

ARGUMENT:: moo
(describe argument here)

ARGUMENT:: callback
(describe argument here)

ARGUMENT:: view
(describe argument here)

ARGUMENT:: show
(describe argument here)

returns:: (describe returnvalue here)


INSTANCEMETHODS::

METHOD:: notify
(describe method here)

returns:: (describe returnvalue here)

METHOD:: color
(describe method here)

ARGUMENT:: c
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: add
(describe method here)

ARGUMENT:: widget
(describe argument here)

ARGUMENT:: stretch
(describe argument here)

ARGUMENT:: align
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: exists
(describe method here)

returns:: (describe returnvalue here)

METHOD:: init
(describe method here)

ARGUMENT:: show
(describe argument here)

ARGUMENT:: callback
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: asView
(describe method here)

returns:: (describe returnvalue here)

METHOD:: view
(describe method here)

returns:: (describe returnvalue here)

METHOD:: show
(describe method here)

ARGUMENT:: doit
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: win
(describe method here)

returns:: (describe returnvalue here)

METHOD:: name
(describe method here)

ARGUMENT:: name
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: string
(describe method here)

returns:: (describe returnvalue here)

METHOD:: title
(describe method here)

ARGUMENT:: title
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: isClosed
(describe method here)

returns:: (describe returnvalue here)

METHOD:: front
(describe method here)

ARGUMENT::  ... args
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: append
(describe method here)

ARGUMENT:: text
(describe argument here)

returns:: (describe returnvalue here)


EXAMPLES::

code::
(some example code)
::
