TITLE:: Moo
summary:: A Moo in SuperCollider
categories:: Libraries>BiLETools>SCMoo, Games>SCMoo
related:: Classes/MooGUI, Classes/MooVerb, Classes/MooObject, Classes/MooInit, Classes/NetAPI, Reference/SomeRelatedStuff, etc.

DESCRIPTION::
A MOO is a Multi-User Dungeon, but Object Oriented


CLASSMETHODS::

METHOD:: default
Get the Moo running


METHOD:: new

ARGUMENT:: netAPI
an instance of NetAPI, which should be active and running

ARGUMENT:: json
A string of JSON or a path to a JSON file

ARGUMENT:: loadType
 \parseFile to read a file or \parseText to read in a text string

ARGUMENT:: isHost
Is this the central host server or a client mirror?




METHOD:: load
Load moo objects from a file

ARGUMENT:: json
A path to a JSON file

ARGUMENT:: api
the instance of NetAPI that is handling all the networking

ARGUMENT:: loadType
 \parseFile to read a file or \parseText to read in a text string

ARGUMENT:: isHost
Is this the central host server or a client mirror?




METHOD:: login
Log in to a moo based primarily on a remote server. This is not yet implemented

ARGUMENT:: netAPI
the NetAPI has already joined the network. This is not yet implemented



METHOD:: fromJSON
Load the Moo's objects from a JSON file or string

ARGUMENT:: json
A string that is either a file name or a JSON string

ARGUMENT:: api
an instance of NetAPI, which should be active and running

ARGUMENT:: loadType
 \parseFile to read a file or \parseText to read in a text string

ARGUMENT:: isHost
Is this the central host server or a client mirror?




METHOD:: bootstrap
Start a moo from nothing as the main server. You can optionally supply JSON or else it will this will create a few object types, a Root user and a single room called Lobby

ARGUMENT:: api
an instance of NetAPI, which should be active and running

ARGUMENT:: json
An optional string which may contain a file path or a JSON string

ARGUMENT:: loadType
 \parseFile to read a file or \parseText to read in a text string

ARGUMENT:: isHost
Is this the central host server or a client mirror?



INSTANCEMETHODS::

METHOD:: me
This object is the user currently logged in

returns:: The instance of MooPlayer that corresponds to the one I'm using in the GUI


METHOD:: pronouns
Not yet implemented, but there is going to be support for pronouns as in LamdbaMoo
returns:: (describe returnvalue here)

METHOD:: api

returns:: An instance of NetAPI



METHOD:: fromJSON
Load objects from a JSON file

ARGUMENT:: obj
(describe argument here)

ARGUMENT:: converter
(describe argument here)

ARGUMENT:: linkToThis
(describe argument here)

ARGUMENT:: loadType
(describe argument here)


METHOD:: host

returns:: true if this instance is the server. False if it is a client of a remote server.

METHOD:: add
Add a new object to the Moo
ARGUMENT:: obj
The instance of MooObject (or a subclass) to add

ARGUMENT:: name
The name of the object

ARGUMENT:: id
A suggested id number for the object

returns:: the actal id for the object

METHOD:: lobby
The "lobby" - that is, the first entrance room a user logs into



METHOD:: load
load all Moo objects from a file (this is normally not called directly)

ARGUMENT:: net
an instance of NetAPI, which should be active and running

ARGUMENT:: json
An optional string which may contain a file path or a JSON string

ARGUMENT:: loadType
 \parseFile to read a file or \parseText to read in a text string

ARGUMENT:: isHost
Is this the central host server or a client mirror?



METHOD:: genericObject
get the generic MooObject instance that is the parent (or at least an ancestor of) of all other objects


METHOD:: genericPlayer
get the generic MooPlayer instance that is the parent of all players

METHOD:: toJSON
export the Moo as a JSON string
ARGUMENT:: converter
An optional instance of MooJSONConverter


METHOD:: init
Not normally called directly

ARGUMENT:: net
an instance of NetApi

METHOD:: init_remote
Not normally called directly, used for joinging remote servers
ARGUMENT:: net
an instance of NetAPI

METHOD:: delete
Remove an object from the Moo.

ARGUMENT:: obj
the MooObject to remove


METHOD:: genericRoom
The generic MooRoom object that is the parent (or at least ancestor of) all other moo rooms
returns:: (describe returnvalue here)

METHOD:: find
find an object in the moo by name. If there are two objects with the same name, this will pick randomly

ARGUMENT:: name


METHOD:: generics
The generic objects


METHOD:: me
The MooPlayer that I'm playing as


EXAMPLES::

We're just running this locally, so we're not going to use a read OSCClient. All of the examples below rely on
code::
n = NetAPI.other("foo", "bar", path:\DummyResponder); n.client.echo_(false);
::

To start a new moo as a Root user:

code::
{ m = Moo.bootstrap(n); }.fork
::

To save your objects to a file:
code::
(
f = File(Platform.defaultTempDir ++ "Moo.JSON".standardizePath, "w");
f.write(m.toJSON);
f.close;
)
::
(To prevent clobbering your old save, type this but note that on many platforms, the tmp directory gets deleted on reboot.)

code::
(
d =  Platform.defaultTempDir; // change this to where you want to save

p = (d ++ "Moo.JSON").standardizePath;
File.exists(p).if({
	File.copy(p, (d ++ "Moo." ++ Date.getDate.rawSeconds ++ ".JSON").standardizePath);
});
f = File(p, "w");
f.write(m.toJSON);
f.close;
)
::



To load your saved objects
code::
(
p = p ? (Platform.defaultTempDir ++ "Moo.JSON").standardizePath; // change this to your save location
{ m = Moo.bootstrap(n, p); }.fork;
)
::

Open a New Document to write SC and MOO Code in
code::
MooGUI.asDocument(m)
::

Use an existing Document
code::
MooGUI.setKeys(Document.current, m.me)
::
